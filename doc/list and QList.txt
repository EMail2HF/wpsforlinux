stl::list和QList都是范型容器, 在任意位置的插入和删除元素都能够在常量时间内完成，时间复杂度为O(1).

stl:list:
	1):内部以双向链表实现, 元素逻辑上为线性序列,在容器内和容器之间移动元素和元素块都能在常量时间内完成,时间复杂度为O(n).
	2):能够在线性时间内从前或从后迭带元素
	3):对比stl::vector, stl::deque,stl::list在容器内任意位置插入、提取和移动元素总体上效率较优
	4）：对比其他序列化容器，stl::list的主要缺点是不能随机存储，特别在元素列表非常长而元素很小的情况，效率很低.

QList:
	1):集合了stl::list和stl::vector的优点, 以列表的方式保存元素并提供基于索引方式的访问，像插入和删除一样.
	2):对干相似的QList,QLinkedList, QVector, 绝大多数情况下，QList是最好的选择,
	QList基于索引的API比QLinkedList基于双向链表的API更方便, 并且通常比QVector快, 由于QList<T>表示为一组指向被存储元素的数组。
	3):如果T是：指针、基本（不大于指针）、QT共享类型，QList<T>在指针数组里直接保存它们。
	在1000以下的元素列表中，在QList<T>中间插入元素都很快，并允许基于索引的访问。
	特别是像prepend()和append()这样的操作会非常快，因为在两端预分配了内存
	4):对于大于一个指针的非共享类型，追加和插入新元素要求分配内存，取而代之QVector更佳（在单堆分配）。
